String.prototype.reverse = function () { for (var e = "", t = this.length - 1; t >= 0; t--)e += this[t]; return e }; let selectFrom = document.getElementById("from"), selectTo = document.getElementById("to"), valueFrom = selectFrom.value, valueTo = selectTo.value, switchingIcon = document.querySelector(".choosing .switching"), inputField = document.querySelector(".input input"), outputButton = document.querySelector(".input .resultBtn"), resultSection = document.querySelector(".result"), resultInput = resultSection.querySelector(".reseultInput .re"), resultOutput = resultSection.querySelector(".reseultOutput .re"), errors = ""; selectFrom.onchange = function () { "use strict"; valueFrom = this.value, document.querySelector(".input input").placeholder = `Type ${"octal" == valueFrom ? "an" : "a"} ${valueFrom} number` }, selectTo.onchange = function () { "use strict"; valueTo = this.value }, switchingIcon.onclick = function () { let e = valueFrom; selectFrom.value = valueTo, selectTo.value = e, valueFrom = selectFrom.value, valueTo = selectTo.value, document.querySelector(".input input").placeholder = `Type ${"octal" == valueFrom ? "an" : "a"} ${valueFrom} number` }; let inputValue = "", finalResult = "", binaryValues = "01.", octalValues = "01234567.", decimalValues = "0123456789.", hexadecimalValues = "0123456789ABCDEFabcdef."; function checkErrors(e, t, l) { for (let r = 0; r < e.length; r++)if (!t.includes(e[r])) return `&#9888; This input is not ${"octal" == l ? "an" : "a"} ${l} number !`; return "" } function ToDecimal(e, t) { let l = 0, r = 0, n = 0; function u(e) { r = 0, n = 0; for (let l = e.length - 1; l >= 0; l--)e.charCodeAt(l) >= 48 && e.charCodeAt(l) <= 57 ? r += parseInt(e[l]) * Math.pow(t, n) : e.charCodeAt(l) >= 65 && e.charCodeAt(l) <= 70 ? r += parseInt(e.charCodeAt(l) - 55) * Math.pow(t, n) : e.charCodeAt(l) >= 97 && e.charCodeAt(l) <= 102 && (r += parseInt(e.charCodeAt(l) - 87) * Math.pow(t, n)), n++; return r } if (e.includes(".")) { let a = e.split(".")[0], o = e.split(".")[1]; l = u(a) + function (e) { r = 0, n = -1; for (let l = 0; l < e.length; l++)e.charCodeAt(l) >= 48 && e.charCodeAt(l) <= 57 ? r += parseInt(e[l]) * Math.pow(t, n) : e.charCodeAt(l) >= 65 && e.charCodeAt(l) <= 70 ? r += parseInt(e[l].charCodeAt() - 55) * Math.pow(t, n) : e.charCodeAt(l) >= 97 && e.charCodeAt(l) <= 102 && (r += parseInt(e[l].charCodeAt() - 87) * Math.pow(t, n)), n--; return r }(o) } else l = u(e); return l.toString() } function FromDecimal(e, t) { let l = "", r = "", n = 0; function u(e) { e = parseInt(e); for (let l = 0; 0 != parseInt(e); l++)(n = e % t) >= 0 && n <= 9 ? r += n.toString() : n >= 10 && n <= 15 && (r += String.fromCharCode(n + 55)), e -= n, e /= t; return r.reverse() } if (0 == parseInt(e) || 0 == parseFloat(e)) return "0"; if (e.includes(".")) { let n = e.split(".")[0], a = e.split(".")[1]; l = u(n) + "." + function (e) { e = parseFloat(`0.${e}`), r = ""; for (let l = 0; parseInt(e) != parseFloat(e) && parseInt(e) < 1; l++)e *= t, parseInt(e) >= 0 && parseInt(e) <= 9 ? r += parseInt(e).toString() : parseInt(e) >= 10 && parseInt(e) <= 15 && (r += String.fromCharCode(parseInt(e) + 55)), 0 != parseInt(e) && (e -= parseInt(e)); return r }(a) } else l = u(e); return l } function BinaryToOctAndHex(e, t) { let l = 0, r = "", n = "", u = 0; function a(e) { n = "", r = "", u = 0; for (let l = 0; l < e.length; l += t)r = e.reverse().slice(l, l + t).reverse(), (u = Number(ToDecimal(r, 2))) >= 10 && u <= 15 ? n += String.fromCharCode(u + 55) : u >= 0 && u <= 9 && (n += u); return n.reverse() } if (e.includes(".")) { let o = e.split(".")[0], i = e.split(".")[1]; l = a(o) + "." + function (e) { n = "", r = "", u = 0; for (let l = 0; l < e.length; l += t)(r = e.slice(l, l + t)).length < t && (r = r.padEnd(t, "0")), (u = Number(ToDecimal(r, 2))) >= 10 && u <= 15 ? n += String.fromCharCode(u + 55) : u >= 0 && u <= 9 && (n += u); return n }(i) } else l = a(e); return l } function OctAndHexToBinary(e, t) { let l = "", r = 0, n = "", u = ""; function a(e) { n = "", r = 0, u = ""; for (let l = 0; l < e.length; l++)(r = e.charCodeAt(l)) >= 48 && r <= 57 ? ((u = FromDecimal((r - 48).toString(), 2)).length < t && (u = u.padStart(t, "0")), n += u) : r >= 65 && r <= 70 ? ((u = FromDecimal((r - 55).toString(), 2)).length < t && (u = u.padStart(t, "0")), n += u) : r >= 97 && r <= 102 && ((u = FromDecimal((r - 87).toString(), 2)).length < t && (u = u.padStart(t, "0")), n += u); return n } if (e.includes(".")) { let t = e.split(".")[0], r = e.split(".")[1]; l = a(t) + "." + a(r) } else l = a(e); return l } function OctalToHexaAndReverse(e, t, l) { let r = "", n = ""; return r = BinaryToOctAndHex(n = OctAndHexToBinary(e, t), l) } outputButton.onclick = function (e) { if (e.preventDefault(), inputValue = inputField.value.trim(), errors = "", "" != inputValue) { if (valueFrom == valueTo) return resultInput.innerHTML = `${inputValue} <sub>(${valueFrom})</sub>`, finalResult = `What are you doing?, you want to convert ${valueFrom} number to ${valueTo} number ! &#128514;&#128517;`, resultOutput.innerHTML = finalResult, 0; if ("decimal" == valueFrom ? 0 == (errors = checkErrors(inputValue, decimalValues, valueFrom)).length && ("binary" == valueTo ? finalResult = FromDecimal(inputValue, 2) : "octal" == valueTo ? finalResult = FromDecimal(inputValue, 8) : "hexadecimal" == valueTo && (finalResult = FromDecimal(inputValue, 16))) : "binary" == valueFrom ? 0 == (errors = checkErrors(inputValue, binaryValues, valueFrom)).length && ("decimal" == valueTo ? finalResult = ToDecimal(inputValue, 2) : "octal" == valueTo ? finalResult = BinaryToOctAndHex(inputValue, 3) : "hexadecimal" == valueTo && (finalResult = BinaryToOctAndHex(inputValue, 4))) : "octal" == valueFrom ? 0 == (errors = checkErrors(inputValue, octalValues, valueFrom)).length && ("decimal" == valueTo ? finalResult = ToDecimal(inputValue, 8) : "binary" == valueTo ? finalResult = OctAndHexToBinary(inputValue, 3) : "hexadecimal" == valueTo && (finalResult = OctalToHexaAndReverse(inputValue, 3, 4))) : "hexadecimal" == valueFrom && 0 == (errors = checkErrors(inputValue, hexadecimalValues, valueFrom)).length && ("decimal" == valueTo ? finalResult = ToDecimal(inputValue, 16) : "binary" == valueTo ? finalResult = OctAndHexToBinary(inputValue, 4) : "octal" == valueTo && (finalResult = OctalToHexaAndReverse(inputValue, 4, 3))), "0" != Number(finalResult).toString()) if (finalResult.includes(".")) { let e = finalResult.split(".")[0].replace(/^0+/, ""), t = finalResult.split(".")[1].reverse().replace(/^0+/, "").reverse(); finalResult = `${e}.${t}` } else finalResult = finalResult.replace(/^0+/, ""); resultInput.innerHTML = `${inputValue} <sub>(${valueFrom})</sub>`, 0 == errors.length ? resultOutput.innerHTML = `${finalResult} <sub>(${valueTo})</sub>` : resultOutput.innerHTML = errors } };